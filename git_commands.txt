# üìù Git & GitHub ‚Äì Guide Complet

## 1Ô∏è‚É£ Configuration initiale (une seule fois)
git config --global user.name "TonNom"        # Configure ton nom pour les commits
git config --global user.email "ton.email@example.com"  # Configure ton email
git config --global credential.helper store   # Sauvegarde ton mot de passe ou token

## 2Ô∏è‚É£ Cr√©ation ou clonage d‚Äôun d√©p√¥t
git init                                    # Initialise un d√©p√¥t Git dans le dossier courant
git clone https://github.com/utilisateur/mon-projet.git  # Clone un d√©p√¥t GitHub existant

## 3Ô∏è‚É£ V√©rifier l‚Äô√©tat du d√©p√¥t
git status                                  # Montre les fichiers modifi√©s, non suivis, etc.
git diff                                    # Montre les diff√©rences avant commit

## 4Ô∏è‚É£ Ajouter des fichiers √† l‚Äôindex
git add .                                   # Ajoute tous les fichiers modifi√©s
git add fichier.txt                          # Ajoute un fichier sp√©cifique

## 5Ô∏è‚É£ Cr√©er un commit (sauvegarde locale)
git commit -m "Message clair d√©crivant les changements"

## 6Ô∏è‚É£ Branches (travailler en parall√®le)
git branch                                   # Liste les branches
git branch ma-branche                        # Cr√©e une nouvelle branche
git checkout ma-branche                      # Passe sur la branche
git checkout -b ma-branche                   # Cr√©e et passe sur la branche en une seule commande
git merge ma-branche                          # Fusionne ma-branche dans la branche courante
git branch -d ma-branche                     # Supprime une branche locale

## 7Ô∏è‚É£ Lier le d√©p√¥t local √† GitHub
git remote add origin https://github.com/utilisateur/mon-projet.git
git remote -v                                # V√©rifie les remotes
git remote remove origin                      # Supprime le remote si n√©cessaire

## 8Ô∏è‚É£ Envoyer les changements sur GitHub
git push -u origin main                       # Premier push, lie la branche locale √† GitHub
git push                                      # Push normal apr√®s liaison
git push --force                              # Force le push (√©crase GitHub, attention)

## 9Ô∏è‚É£ R√©cup√©rer les changements depuis GitHub
git pull                                      # R√©cup√®re les changements et merge automatiquement
git pull --rebase                             # R√©cup√®re et replace tes commits locaux au-dessus

## üîü Historique et navigation
git log                                       # Affiche l‚Äôhistorique complet
git log --oneline                             # Historique simplifi√©
git checkout <id_commit>                      # Revenir √† une version sp√©cifique
git reset --hard <id_commit>                  # Revenir √† une version et supprimer les commits r√©cents

## 1Ô∏è‚É£1Ô∏è‚É£ R√©initialiser un d√©p√¥t existant
rm -rf .git                                   # Supprime tout l‚Äôhistorique Git
git init                                      # R√©initialise le d√©p√¥t
git add .                                     # Ajoute tous les fichiers
git commit -m "Initial commit"               # Premier commit propre

## 1Ô∏è‚É£2Ô∏è‚É£ Travailler avec SSH (plus pratique que le token)
ssh-keygen -t ed25519 -C "ton.email@example.com"   # G√©n√®re une cl√© SSH
eval "$(ssh-agent -s)"                              # D√©marre l‚Äôagent SSH
ssh-add ~/.ssh/id_ed25519                            # Ajoute la cl√© √† l‚Äôagent
cat ~/.ssh/id_ed25519.pub                            # Copie la cl√© publique pour GitHub
ssh -T git@github.com                                # Teste la connexion
git remote set-url origin git@github.com:utilisateur/mon-projet.git  # Passe en SSH

## 1Ô∏è‚É£3Ô∏è‚É£ Workflow typique au quotidien
1. Modifier des fichiers
2. V√©rifier les fichiers : git status
3. Ajouter : git add .
4. Commit : git commit -m "Description"
5. Push : git push
6. Si GitHub a des changements : git pull --rebase puis git push

